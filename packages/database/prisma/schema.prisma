// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  avatarUrl    String?  @map("avatar_url")
  provider     String
  providerId   String?  @map("provider_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastActiveAt DateTime @default(now()) @map("last_active_at")

  // Relations
  ownedWorkspaces WorkspaceMember[] @relation("WorkspaceOwner")
  workspaces      WorkspaceMember[]
  comments        Comment[]
  sessions        Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  ownerId   String   @map("owner_id")
  settings  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  members WorkspaceMember[]
  pages   Page[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String   @map("workspace_id")
  userId      String   @map("user_id")
  role        String   // 'owner' | 'admin' | 'editor' | 'viewer'
  joinedAt    DateTime @default(now()) @map("joined_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  owner     User?     @relation("WorkspaceOwner", fields: [userId], references: [id])

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Page {
  id          String   @id @default(cuid())
  workspaceId String   @map("workspace_id")
  title       String
  parentId    String?  @map("parent_id")
  documentId  String   @unique @map("document_id")
  position    Int      @default(0)
  permissions Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  parent    Page?     @relation("PageHierarchy", fields: [parentId], references: [id])
  children  Page[]    @relation("PageHierarchy")
  document  Document?

  @@map("pages")
}

model Document {
  id           String   @id // This will be the same as Page.documentId
  state        Bytes
  version      Int      @default(0)
  lastModified DateTime @default(now()) @map("last_modified")
  sizeBytes    Int      @default(0) @map("size_bytes")

  // Relations
  page    Page              @relation(fields: [id], references: [documentId], onDelete: Cascade)
  history DocumentHistory[]

  @@map("documents")
}

model DocumentHistory {
  id         String   @id @default(cuid())
  documentId String   @map("document_id")
  state      Bytes
  version    Int
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_history")
}

model Comment {
  id            String   @id @default(cuid())
  documentId    String   @map("document_id")
  parentId      String?  @map("parent_id")
  authorId      String   @map("author_id")
  content       String
  positionStart Int?     @map("position_start")
  positionEnd   Int?     @map("position_end")
  resolved      Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentThread", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentThread")

  @@map("comments")
}

model FileUpload {
  id         String   @id @default(cuid())
  name       String
  size       Int
  type       String
  url        String
  uploadedBy String   @map("uploaded_by")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("file_uploads")
}