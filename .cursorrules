# 커밋 메시지 작성 규칙

## 기본 원칙
- 모든 커밋 메시지는 **한글로 작성**
- commitlint 규칙 준수 (Conventional Commits 형식)
- 명확하고 간결한 메시지 작성

## 커밋 메시지 형식

### 기본 구조
```
<type>(<scope>): <subject>

<body>

<footer>
```

### Type (필수)
- `feat`: 새로운 기능 추가
- `fix`: 버그 수정
- `docs`: 문서 수정
- `style`: 코드 포맷팅, 세미콜론 누락 등 (기능 변경 없음)
- `refactor`: 코드 리팩토링 (기능 변경 없음)
- `test`: 테스트 코드 추가 또는 수정
- `chore`: 빌드 과정 또는 보조 도구 변경
- `ci`: CI/CD 설정 변경
- `perf`: 성능 개선
- `build`: 빌드 시스템 또는 외부 의존성 변경

### Scope (선택사항)
- `auth`: 인증 관련
- `database`: 데이터베이스 관련
- `api`: API 관련
- `ui`: 사용자 인터페이스
- `config`: 설정 파일
- `deps`: 의존성
- `lint`: 린트 관련
- `types`: 타입 정의

### Subject (필수)
- 50자 이내로 작성
- 명령형 현재시제 사용 (예: "추가하다" ❌, "추가" ✅)
- 첫 글자는 소문자
- 마침표 사용 금지

### Body (선택사항)
- 72자마다 줄바꿈
- 무엇을, 왜 변경했는지 설명
- 이전 동작과 새로운 동작의 차이점 설명

### Footer (선택사항)
- Breaking Changes: `BREAKING CHANGE: <description>`
- Issues: `Closes #123`, `Fixes #456`

## ✅ 올바른 예시

```bash
# 기능 추가
feat(auth): 로그인 기능 추가

- 이메일/비밀번호 로그인 구현
- JWT 토큰 발급 로직 추가
- 로그인 폼 UI 컴포넌트 생성

# 버그 수정
fix(database): Prisma 클라이언트 타입 에러 수정

- @prisma/client에서 모델 타입 export 문제 해결
- utils.ts의 any 타입 에러 수정
- pnpm type-check 모든 패키지 통과 확인

# 리팩토링
refactor(api): API 응답 형식 표준화

- ApiResponse<T> 타입 적용
- 에러 핸들링 로직 개선
- 일관된 응답 형식 보장

# 설정 변경
chore(config): ESLint 설정 업데이트

- import 순서 규칙 추가
- no-unused-vars 규칙 강화
- prettier 설정 통합

# 문서 수정
docs(readme): 설치 가이드 업데이트

- 새로운 의존성 설치 방법 추가
- 환경 변수 설정 가이드 개선
- 트러블슈팅 섹션 추가
```

## ❌ 잘못된 예시

```bash
# 영어 사용
fix: Fix type error in database

# 과도하게 길거나 불명확한 제목
fix: 데이터베이스에서 발생하는 타입 에러를 수정하여 빌드가 정상적으로 작동하도록 함

# 명령형이 아닌 형식
feat(auth): 로그인 기능이 추가되었습니다

# 마침표 사용
fix(database): 타입 에러 수정.

# 스코프 누락 (필요한 경우)
fix: 데이터베이스 타입 에러 수정
```

## 특별 규칙

### 한글 표현 가이드
- **동사**: 추가, 수정, 삭제, 개선, 업데이트, 변경, 구현, 적용
- **명사**: 기능, 버그, 에러, 설정, 문서, 테스트, 타입, 로직
- **형용사**: 새로운, 기존, 잘못된, 올바른, 명확한, 간결한

### 자주 사용하는 패턴
```bash
# 타입 에러 수정
fix(types): <설명> 타입 에러 수정

# 기능 추가
feat(<scope>): <기능명> 기능 추가

# 설정 변경
chore(<scope>): <설명> 설정 변경

# 문서 업데이트
docs(<scope>): <설명> 문서 업데이트

# 리팩토링
refactor(<scope>): <설명> 리팩토링
```

## 커밋 작성 체크리스트

- [ ] 커밋 메시지가 한글로 작성되었는가?
- [ ] Type이 적절하게 선택되었는가?
- [ ] Scope가 명확한가? (필요한 경우)
- [ ] Subject가 50자 이내인가?
- [ ] 명령형 현재시제를 사용했는가?
- [ ] 첫 글자가 소문자인가?
- [ ] 마침표를 사용하지 않았는가?
- [ ] Body가 필요한 경우 72자마다 줄바꿈했는가?
- [ ] Breaking Change가 있는 경우 Footer에 명시했는가?
- [ ] 관련 이슈가 있는 경우 Footer에 참조했는가?

## 자동화 도구 활용

```bash
# 커밋 메시지 검증
npx commitlint --edit $1

# 커밋 메시지 템플릿 사용
git commit -m "feat(auth): 로그인 기능 추가

- 이메일/비밀번호 로그인 구현
- JWT 토큰 발급 로직 추가
- 로그인 폼 UI 컴포넌트 생성"
```

이 규칙을 따라 커밋 메시지를 작성하면 일관되고 명확한 커밋 히스토리를 유지할 수 있습니다.
