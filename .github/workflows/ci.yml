name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.16.1'
  DATABASE_URL: 'file:./test.db'
  NEXTAUTH_SECRET: 'ci-test-secret-key'
  NEXTAUTH_URL: 'http://localhost:3000'
  JWT_SECRET: 'ci-test-jwt-secret'
  ENCRYPTION_KEY: 'ci-test-encryption-key-32-chars'
  LOG_LEVEL: 'error'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Prisma cache
        uses: actions/cache@v4
        with:
          path: |
            packages/database/node_modules/.prisma
            node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('packages/database/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        run: |
          echo "Installing dependencies with approved build scripts..."
          pnpm install --frozen-lockfile --prefer-offline --unsafe-perm

      - name: Verify ESLint installation
        run: |
          echo "Checking ESLint installation in packages..."
          find packages -name "package.json" -exec echo "Checking {}" \; -exec grep -l "eslint" {} \;
          find apps -name "package.json" -exec echo "Checking {}" \; -exec grep -l "eslint" {} \;

      - name: Generate Prisma Client
        run: |
          echo "Generating Prisma client for lint and type check..."
          cd packages/database
          pnpm prisma generate
          echo "Verifying Prisma client generation..."
          ls -la node_modules/.prisma/client/ || echo "Prisma client not found"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Ensure all dependencies are installed
        run: |
          echo "Ensuring all workspace dependencies are properly installed..."
          pnpm install --frozen-lockfile --unsafe-perm
          echo "Checking if ESLint is available in each package..."
          for pkg in packages/* apps/*; do
            if [ -f "$pkg/package.json" ] && grep -q "eslint" "$pkg/package.json"; then
              echo "Checking ESLint in $pkg..."
              if [ ! -f "$pkg/node_modules/.bin/eslint" ]; then
                echo "ESLint not found in $pkg, installing dependencies..."
                cd "$pkg" && pnpm install && cd - > /dev/null
              fi
            fi
          done

      - name: Lint
        run: pnpm lint
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Type Check
        run: pnpm type-check
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Prisma cache
        uses: actions/cache@v4
        with:
          path: |
            packages/database/node_modules/.prisma
            node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('packages/database/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        run: |
          echo "Installing dependencies with approved build scripts..."
          pnpm install --frozen-lockfile --prefer-offline --unsafe-perm

      - name: Verify Prisma installation
        run: |
          echo "Checking Prisma installation..."
          cd packages/database
          pnpm prisma --version
          echo "Checking if Prisma client exists..."
          ls -la node_modules/.prisma/client/ || echo "Prisma client not found"

      - name: Generate Prisma Client
        run: |
          echo "Generating Prisma client..."
          cd packages/database
          pnpm prisma generate
          echo "Verifying Prisma client generation..."
          ls -la node_modules/.prisma/client/
          echo "Checking generated files..."
          find node_modules/.prisma/client -name "*.js" | head -5
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Verify Prisma Client Generation
        run: |
          echo "Final verification of Prisma client..."
          cd packages/database
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "✅ Prisma client generated successfully"
            ls -la node_modules/.prisma/client/
          else
            echo "❌ Prisma client generation failed"
            echo "Contents of node_modules/.prisma:"
            ls -la node_modules/.prisma/ || echo "No .prisma directory found"
            echo "Contents of node_modules:"
            ls -la node_modules/ | grep prisma || echo "No prisma in node_modules"
            exit 1
          fi
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Pre-test verification
        run: |
          echo "Running pre-test verification..."
          echo "Checking Prisma client in database package..."
          cd packages/database
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "✅ Prisma client exists in database package"
          else
            echo "❌ Prisma client missing in database package"
            echo "Regenerating Prisma client..."
            pnpm prisma generate
          fi

          echo "Checking if @prisma/client can be imported..."
          node -e "try { require('@prisma/client'); console.log('✅ @prisma/client can be imported'); } catch(e) { console.log('❌ @prisma/client import failed:', e.message); process.exit(1); }"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run tests
        run: pnpm test
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Run database tests
        run: pnpm test --testPathPatterns="database"
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Run API tests
        run: pnpm test --testPathPatterns="api"
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Run performance tests
        run: pnpm test --testPathPatterns="performance"
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Prisma cache
        uses: actions/cache@v4
        with:
          path: |
            packages/database/node_modules/.prisma
            node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('packages/database/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline --unsafe-perm

      - name: Generate Prisma Client
        run: |
          echo "Generating Prisma client for build..."
          cd packages/database
          pnpm prisma generate
          echo "Verifying Prisma client generation..."
          ls -la node_modules/.prisma/client/ || echo "Prisma client not found"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build packages
        run: pnpm build
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist/
            apps/*/dist/
            apps/*/.next/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline --unsafe-perm

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Check for known vulnerabilities
        run: pnpm audit --audit-level high
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
