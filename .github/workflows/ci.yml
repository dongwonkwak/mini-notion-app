name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.16.1'
  DATABASE_URL: 'file:./test.db'
  NEXTAUTH_SECRET: 'ci-test-secret-key'
  NEXTAUTH_URL: 'http://localhost:3000'
  JWT_SECRET: 'ci-test-jwt-secret'
  ENCRYPTION_KEY: 'ci-test-encryption-key-32-chars'
  LOG_LEVEL: 'error'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd packages/database
          pnpm prisma generate
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Lint
        run: pnpm lint
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Type Check
        run: pnpm type-check
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd packages/database
          pnpm prisma generate
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run tests
        run: pnpm test
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Run database tests
        run: pnpm test --testPathPatterns="database"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Run API tests
        run: pnpm test --testPathPatterns="api"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Run performance tests
        run: pnpm test --testPathPatterns="performance"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd packages/database
          pnpm prisma generate
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build packages
        run: pnpm build
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist/
            apps/*/dist/
            apps/*/.next/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Check for known vulnerabilities
        run: pnpm audit --audit-level high
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
