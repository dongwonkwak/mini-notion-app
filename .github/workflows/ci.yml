name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

# GitHub API Í∂åÌïú ÏÑ§Ï†ï
permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write
  statuses: write

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.16.1'
  DATABASE_URL: 'file:./test.db'
  NEXTAUTH_SECRET: 'ci-test-secret-key'
  NEXTAUTH_URL: 'http://localhost:3000'
  JWT_SECRET: 'ci-test-jwt-secret'
  ENCRYPTION_KEY: 'ci-test-encryption-key-32-chars'
  LOG_LEVEL: 'error'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Prisma cache
        uses: actions/cache@v4
        with:
          path: |
            packages/database/node_modules/.prisma
            node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('packages/database/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        run: |
          echo "Installing dependencies with approved build scripts..."
          pnpm install --frozen-lockfile --prefer-offline

      - name: Verify ESLint installation
        run: |
          echo "Checking ESLint installation in packages..."
          find packages -name "package.json" -exec echo "Checking {}" \; -exec grep -l "eslint" {} \;
          find apps -name "package.json" -exec echo "Checking {}" \; -exec grep -l "eslint" {} \;

      - name: Generate Prisma Client
        run: |
          echo "Generating Prisma client for lint and type check..."
          cd packages/database
          pnpm prisma validate
          pnpm prisma format --check
          echo "‚úÖ Schema validation completed"

          # Setup Mock Prisma Client using script
          cd ../..
          chmod +x scripts/setup-mock-prisma.sh
          ./scripts/setup-mock-prisma.sh
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Ensure all dependencies are installed
        run: |
          echo "Ensuring all workspace dependencies are properly installed..."
          pnpm install --frozen-lockfile
          echo "Checking if ESLint is available in each package..."
          for pkg in packages/* apps/*; do
            if [ -f "$pkg/package.json" ] && grep -q "eslint" "$pkg/package.json"; then
              echo "Checking ESLint in $pkg..."
              if [ ! -f "$pkg/node_modules/.bin/eslint" ]; then
                echo "ESLint not found in $pkg, installing dependencies..."
                cd "$pkg" && pnpm install && cd - > /dev/null
              fi
            fi
          done

      - name: Lint
        run: pnpm lint
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Type Check
        run: pnpm type-check
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Prisma cache
        uses: actions/cache@v4
        with:
          path: |
            packages/database/node_modules/.prisma
            node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('packages/database/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        run: |
          echo "Installing dependencies with approved build scripts..."
          pnpm install --frozen-lockfile --prefer-offline

      - name: Verify Prisma installation
        run: |
          echo "Checking Prisma installation..."
          cd packages/database
          pnpm prisma validate
          pnpm prisma format --check
          echo "‚úÖ Schema validation completed"

          # Setup Mock Prisma Client using script
          cd ../..
          chmod +x scripts/setup-mock-prisma.sh
          ./scripts/setup-mock-prisma.sh
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run tests
        run: pnpm test
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Run database tests
        run: pnpm test --testPathPatterns="database"
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Run API tests
        run: pnpm test --testPathPatterns="api"
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Run performance tests
        run: pnpm test --testPathPatterns="performance"
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Prisma cache
        uses: actions/cache@v4
        with:
          path: |
            packages/database/node_modules/.prisma
            node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('packages/database/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Generate Prisma Client
        run: |
          echo "üîç Validating Prisma schema..."
          cd packages/database
          pnpm prisma validate
          pnpm prisma format --check
          echo "‚úÖ Schema validation completed"

          # Setup Mock Prisma Client using script
          cd ../..
          chmod +x scripts/setup-mock-prisma.sh
          ./scripts/setup-mock-prisma.sh
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build packages
        run: pnpm build
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist/
            apps/*/dist/
            apps/*/.next/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Check for known vulnerabilities
        run: pnpm audit --audit-level high
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

  bundle-size-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Generate Prisma Client
        run: |
          echo "üîç Validating Prisma schema..."
          cd packages/database
          pnpm prisma validate
          pnpm prisma format --check
          echo "‚úÖ Schema validation completed"

          # Setup Mock Prisma Client using script
          cd ../..
          chmod +x scripts/setup-mock-prisma.sh
          ./scripts/setup-mock-prisma.sh
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build for analysis
        run: pnpm build
        env:
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Analyze bundle size
        run: |
          echo "üì¶ Analyzing bundle size..."
          
          # Next.js Ïï± Î≤àÎì§ ÌÅ¨Í∏∞ Î∂ÑÏÑù
          if [ -d "apps/web/.next" ]; then
            echo "## üìä Bundle Size Analysis" >> bundle-analysis.md
            echo "" >> bundle-analysis.md
            echo "### Web App Bundle" >> bundle-analysis.md
            echo "" >> bundle-analysis.md
            
            # .next/static Ìè¥Îçî ÌÅ¨Í∏∞ Î∂ÑÏÑù
            if [ -d "apps/web/.next/static" ]; then
              echo "#### Static Assets" >> bundle-analysis.md
              echo '```' >> bundle-analysis.md
              du -sh apps/web/.next/static/* | sort -hr >> bundle-analysis.md
              echo '```' >> bundle-analysis.md
              echo "" >> bundle-analysis.md
            fi
            
            # Ï†ÑÏ≤¥ .next Ìè¥Îçî ÌÅ¨Í∏∞
            echo "#### Total Bundle Size" >> bundle-analysis.md
            echo '```' >> bundle-analysis.md
            du -sh apps/web/.next >> bundle-analysis.md
            echo '```' >> bundle-analysis.md
            echo "" >> bundle-analysis.md
          fi
          
          # Ìå®ÌÇ§ÏßÄÎ≥Ñ dist Ìè¥Îçî ÌÅ¨Í∏∞ Î∂ÑÏÑù
          echo "### Package Bundles" >> bundle-analysis.md
          echo "" >> bundle-analysis.md
          echo '```' >> bundle-analysis.md
          find packages -name "dist" -type d -exec du -sh {} \; | sort -hr >> bundle-analysis.md
          echo '```' >> bundle-analysis.md
          echo "" >> bundle-analysis.md
          
          # Ïï±Î≥Ñ dist Ìè¥Îçî ÌÅ¨Í∏∞ Î∂ÑÏÑù
          echo "### App Bundles" >> bundle-analysis.md
          echo "" >> bundle-analysis.md
          echo '```' >> bundle-analysis.md
          find apps -name "dist" -type d -exec du -sh {} \; | sort -hr >> bundle-analysis.md
          echo '```' >> bundle-analysis.md
          echo "" >> bundle-analysis.md
          
          echo "‚úÖ Bundle size analysis completed"

      - name: Comment on PR
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // bundle-analysis.md ÌååÏùº ÏùΩÍ∏∞
              const analysisPath = path.join(process.cwd(), 'bundle-analysis.md');
              
              if (fs.existsSync(analysisPath)) {
                const analysisContent = fs.readFileSync(analysisPath, 'utf8');
                
                // PRÏóê ÎåìÍ∏Ä ÏûëÏÑ±
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: analysisContent
                });
                
                console.log('‚úÖ Bundle size analysis comment posted successfully');
              } else {
                console.log('‚ö†Ô∏è Bundle analysis file not found, posting simple message');
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: 'üì¶ Bundle size analysis completed. Check the build logs for details.'
                });
              }
            } catch (error) {
              console.error('‚ùå Failed to post bundle analysis comment:', error.message);
              
              // ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ ÏõåÌÅ¨ÌîåÎ°úÏö∞Î•º Ïã§Ìå®ÏãúÌÇ§ÏßÄ ÏïäÏùå
              console.log('‚ö†Ô∏è Continuing workflow despite comment failure');
            }
