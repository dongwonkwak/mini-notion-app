{
  "name": "Code Quality Check",
  "description": "코드 변경 시 자동으로 품질 검사를 수행합니다 (린트, 타입 체크, 테스트)",
  "trigger": {
    "type": "file_change",
    "patterns": [
      "**/*.ts",
      "**/*.tsx", 
      "**/*.js",
      "**/*.jsx"
    ],
    "exclude_patterns": [
      "node_modules/**",
      "dist/**",
      ".next/**",
      "coverage/**"
    ]
  },
  "conditions": [
    {
      "type": "file_exists",
      "path": "package.json"
    }
  ],
  "prompt": "코드 파일이 변경되었습니다: {{changed_files}}\n\n**실시간 품질 검증**을 수행해주세요:\n\n## 🔍 **1단계: 즉시 검증 (Critical)**\n```bash\n# ESLint 검사 - 에러 시 즉시 중단\npnpm eslint .\n\n# TypeScript 타입 체크 - 에러 시 즉시 중단  \npnpm type-check\n```\n**결과**: ❌ 에러 발견 시 즉시 수정 필요, ✅ 통과 시 다음 단계 진행\n\n## 🎨 **2단계: 코드 스타일 정리 (Auto-fix)**\n```bash\n# 코드 포맷팅 자동 적용\npnpm format\n\n# Import 정리 및 최적화\n# - 사용하지 않는 import 제거\n# - Import 순서 정리 (builtin → external → internal)\n# - 상대/절대 경로 일관성 확인\n```\n\n## 🧪 **3단계: 관련 테스트 실행**\n```bash\n# 변경된 파일과 관련된 테스트만 실행\npnpm test --testPathPattern={{changed_files}}\n\n# 새로운 코드에 대한 테스트 존재 확인\n# - 새 함수/컴포넌트에 대한 테스트 파일 있는지 확인\n# - 테스트 커버리지 70% 이상 유지 확인\n```\n\n## 📊 **4단계: 품질 메트릭 검증**\n- **복잡도 체크**: 함수 복잡도 10 이하 유지\n- **중복 코드**: 중복된 로직 3회 이상 시 리팩토링 제안\n- **파일 크기**: 300줄 이상 시 분할 검토\n- **의존성**: 순환 의존성 검사\n\n## 🚨 **5단계: 보안 및 성능 체크**\n- **민감 정보**: 하드코딩된 비밀번호, API 키 검사\n- **성능 패턴**: 비효율적인 루프, 메모리 누수 패턴 확인\n- **접근성**: React 컴포넌트의 경우 ARIA 속성 확인\n\n## 📋 **결과 리포트 형식**\n```\n✅ ESLint: 통과 (0 errors, 2 warnings)\n✅ TypeScript: 통과 (0 errors)\n✅ 포맷팅: 자동 적용 완료\n⚠️  테스트: 새 함수 'calculateTotal'에 대한 테스트 필요\n✅ 커버리지: 73% (목표: 70% 이상)\n```\n\n## 🔧 **자동 수정 vs 수동 수정**\n\n### 자동 수정 (즉시 적용)\n- 코드 포맷팅 (Prettier)\n- Import 정리\n- 간단한 ESLint 규칙 (--fix 옵션)\n\n### 수동 수정 필요 (가이드 제공)\n- TypeScript 타입 에러\n- 복잡한 ESLint 에러\n- 테스트 작성\n- 리팩토링 제안\n\n**참고 문서:**\n- Testing Strategy: .kiro/steering/testing-strategy.md\n- Enhanced Workflow: .kiro/steering/enhanced-workflow.md",
  "auto_execute": true,
  "enabled": true
}