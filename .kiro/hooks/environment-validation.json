{
  "name": "Environment Validation",
  "description": "태스크 시작 전 개발 환경이 올바르게 설정되어 있는지 검증합니다",
  "trigger": {
    "type": "manual",
    "button_text": "🔧 환경 검증"
  },
  "prompt": "태스크 구현을 위한 **개발 환경 검증**을 수행합니다:\n\n## 🔍 **1단계: 기본 환경 확인**\n```bash\n# Node.js 버전 확인 (18+ 필요)\nnode --version\n\n# pnpm 버전 확인 (8+ 필요)\npnpm --version\n\n# Git 상태 확인\ngit status\n```\n\n## 📦 **2단계: 의존성 검증**\n```bash\n# 의존성 설치 상태 확인\npnpm install --frozen-lockfile\n\n# 패키지 무결성 검증\npnpm audit\n\n# Turbo 캐시 상태 확인\nturbo --version\n```\n\n## 🐳 **3단계: Docker 서비스 확인**\n```bash\n# Docker 서비스 상태 확인\ndocker-compose ps\n\n# 필요한 서비스들이 실행 중인지 확인:\n# - redis (포트 6379)\n# - minio (포트 9000, 9001) \n# - mailhog (포트 1025, 8025)\n\n# 서비스가 중단된 경우 재시작\ndocker-compose up -d\n```\n\n## 🗄️ **4단계: 데이터베이스 연결 확인**\n```bash\n# Prisma 클라이언트 생성\npnpm --filter @editor/database db:generate\n\n# 데이터베이스 연결 테스트\npnpm --filter @editor/database db:validate\n\n# 시딩 데이터 확인 (필요시)\npnpm --filter @editor/database db:seed\n```\n\n## ⚙️ **5단계: 환경 변수 확인**\n```bash\n# .env 파일 존재 확인\nls -la .env*\n\n# 필수 환경 변수 확인:\n# - DATABASE_URL\n# - REDIS_URL  \n# - NEXTAUTH_SECRET\n# - AWS_* (파일 업로드용)\n```\n\n## 🧪 **6단계: 빌드 및 테스트 환경 확인**\n```bash\n# TypeScript 컴파일 확인\npnpm type-check\n\n# 린트 설정 확인\npnpm lint --max-warnings 0\n\n# 테스트 환경 확인\npnpm test --passWithNoTests\n\n# 빌드 확인 (간단한 검증)\npnpm build --dry-run || echo \"빌드 설정 확인 필요\"\n```\n\n## 📋 **검증 결과 리포트**\n\n각 단계별로 다음 형식으로 결과를 보고해주세요:\n\n```\n🔧 환경 검증 결과\n\n✅ Node.js: v18.17.0 (요구사항: 18+)\n✅ pnpm: v8.6.10 (요구사항: 8+)\n✅ Git: clean working directory\n\n✅ 의존성: 모든 패키지 설치 완료\n⚠️  보안: 3개의 low severity 취약점 발견 (업데이트 권장)\n\n✅ Docker: 모든 서비스 실행 중\n  - redis: healthy (6379)\n  - minio: healthy (9000, 9001)\n  - mailhog: healthy (1025, 8025)\n\n✅ 데이터베이스: 연결 성공, 시딩 데이터 확인\n✅ 환경 변수: 모든 필수 변수 설정됨\n✅ 빌드 환경: TypeScript, ESLint, 테스트 모두 정상\n\n🎯 결과: 태스크 구현 준비 완료!\n```\n\n## 🚨 **문제 발생 시 해결 가이드**\n\n### Docker 서비스 문제\n```bash\n# 서비스 재시작\ndocker-compose down && docker-compose up -d\n\n# 포트 충돌 확인\nlsof -i :6379 -i :9000 -i :1025\n```\n\n### 데이터베이스 문제\n```bash\n# 데이터베이스 재설정\npnpm --filter @editor/database db:push --force-reset\npnpm --filter @editor/database db:seed\n```\n\n### 의존성 문제\n```bash\n# 캐시 정리 후 재설치\npnpm store prune\nrm -rf node_modules\npnpm install\n```\n\n**참고**: 환경 검증은 새로운 태스크 시작 전이나 문제 발생 시 언제든 실행할 수 있습니다.",
  "auto_execute": false,
  "enabled": true
}