{
  "name": "Security Scan",
  "description": "코드 보안 취약점 및 민감 정보 노출을 검사합니다",
  "trigger": {
    "type": "manual",
    "button_text": "🔒 보안 스캔"
  },
  "prompt": "**보안 스캔**을 수행하여 취약점과 민감 정보 노출을 검사합니다:\n\n## 🔍 **1단계: 의존성 취약점 스캔**\n```bash\n# npm audit으로 알려진 취약점 확인\npnpm audit\n\n# 심각도별 취약점 분류\npnpm audit --audit-level moderate\n\n# 자동 수정 가능한 취약점 수정\npnpm audit --fix\n```\n\n## 🔐 **2단계: 민감 정보 노출 검사**\n\n### 하드코딩된 시크릿 검사\n```bash\n# API 키 패턴 검사\ngrep -r \"api[_-]key\\|apikey\" --include=\"*.ts\" --include=\"*.js\" --include=\"*.tsx\" --include=\"*.jsx\" .\n\n# 비밀번호 패턴 검사  \ngrep -r \"password\\s*=\\s*['\\\"]\" --include=\"*.ts\" --include=\"*.js\" .\n\n# JWT 토큰 패턴 검사\ngrep -r \"eyJ[A-Za-z0-9-_]*\" --include=\"*.ts\" --include=\"*.js\" .\n\n# 데이터베이스 URL 검사\ngrep -r \"postgresql://\\|mysql://\\|mongodb://\" --include=\"*.ts\" --include=\"*.js\" .\n```\n\n### 환경 변수 누출 검사\n```bash\n# .env 파일이 Git에 추가되었는지 확인\ngit ls-files | grep \"\\.env$\"\n\n# process.env 사용 패턴 검사 (클라이언트 사이드)\ngrep -r \"process\\.env\" apps/web/src/ --include=\"*.ts\" --include=\"*.tsx\"\n```\n\n## 🛡️ **3단계: 코드 보안 패턴 검사**\n\n### 위험한 함수 사용 검사\n```bash\n# eval() 사용 검사\ngrep -r \"eval\\s*\\(\" --include=\"*.ts\" --include=\"*.js\" .\n\n# innerHTML 사용 검사 (XSS 위험)\ngrep -r \"\\.innerHTML\\s*=\" --include=\"*.ts\" --include=\"*.tsx\" .\n\n# dangerouslySetInnerHTML 사용 검사\ngrep -r \"dangerouslySetInnerHTML\" --include=\"*.tsx\" .\n```\n\n### SQL 인젝션 패턴 검사\n```bash\n# 문자열 연결로 쿼리 생성 패턴\ngrep -r \"SELECT.*+\\|INSERT.*+\\|UPDATE.*+\" --include=\"*.ts\" --include=\"*.js\" .\n\n# Prisma raw 쿼리 사용 검사\ngrep -r \"\\$queryRaw\\|\\$executeRaw\" --include=\"*.ts\" .\n```\n\n## 🔒 **4단계: 인증 및 권한 검사**\n\n### JWT 토큰 처리 검사\n```bash\n# JWT 시크릿 하드코딩 검사\ngrep -r \"jwt.*secret\" --include=\"*.ts\" --include=\"*.js\" .\n\n# 토큰 만료 시간 설정 확인\ngrep -r \"expiresIn\\|exp:\" --include=\"*.ts\" --include=\"*.js\" .\n```\n\n### 권한 검증 로직 확인\n```bash\n# 권한 체크 없는 API 엔드포인트 검사\ngrep -r \"export.*function\\|app\\.(get\\|post\\|put\\|delete)\" apps/api/src/ --include=\"*.ts\"\n```\n\n## 📊 **5단계: 파일 권한 및 설정 검사**\n\n### 파일 권한 확인\n```bash\n# 실행 권한이 있는 파일 확인\nfind . -type f -perm +111 -not -path \"./node_modules/*\" -not -path \"./.git/*\"\n\n# 민감한 파일의 권한 확인\nls -la .env* 2>/dev/null || echo \"환경 변수 파일 없음\"\n```\n\n### Docker 보안 설정 확인\n```bash\n# Docker Compose 보안 설정 검사\ngrep -A 5 -B 5 \"privileged\\|user.*root\" docker-compose.yml || echo \"Docker 보안 설정 양호\"\n```\n\n## 📋 **보안 스캔 결과 리포트**\n\n```\n🔒 보안 스캔 결과\n\n📦 의존성 취약점:\n✅ 심각한 취약점: 0개\n⚠️  중간 취약점: 2개 (업데이트 권장)\n✅ 낮은 취약점: 5개 (모니터링)\n\n🔐 민감 정보 노출:\n✅ API 키 하드코딩: 발견되지 않음\n✅ 비밀번호 하드코딩: 발견되지 않음\n⚠️  .env 파일: .gitignore에 포함됨 (양호)\n\n🛡️ 코드 보안 패턴:\n✅ eval() 사용: 발견되지 않음\n⚠️  innerHTML 사용: 2곳 발견 (검토 필요)\n✅ SQL 인젝션 위험: 발견되지 않음\n\n🔒 인증 및 권한:\n✅ JWT 시크릿: 환경 변수 사용\n✅ 토큰 만료: 적절히 설정됨\n⚠️  API 권한 검증: 3개 엔드포인트 검토 필요\n\n📁 파일 및 설정:\n✅ 파일 권한: 적절함\n✅ Docker 보안: 양호\n\n🎯 전체 보안 점수: 85/100 (양호)\n```\n\n## 🚨 **발견된 문제 해결 가이드**\n\n### 의존성 취약점\n```bash\n# 특정 패키지 업데이트\npnpm update [package-name]\n\n# 모든 패키지 최신 버전으로 업데이트\npnpm update --latest\n```\n\n### innerHTML 사용 문제\n```typescript\n// ❌ 위험한 방법\nelement.innerHTML = userInput;\n\n// ✅ 안전한 방법\nelement.textContent = userInput;\n// 또는 DOMPurify 사용\nelement.innerHTML = DOMPurify.sanitize(userInput);\n```\n\n### API 권한 검증 누락\n```typescript\n// ✅ 권한 검증 추가\nexport async function handler(req: NextApiRequest, res: NextApiResponse) {\n  // 인증 확인\n  const session = await getServerSession(req, res, authOptions);\n  if (!session) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n  \n  // 권한 확인\n  if (!hasPermission(session.user, 'required-permission')) {\n    return res.status(403).json({ error: 'Forbidden' });\n  }\n  \n  // 실제 로직\n}\n```\n\n**권장 실행 주기**: 주 1회 또는 새로운 의존성 추가 시",
  "auto_execute": false,
  "enabled": true
}
